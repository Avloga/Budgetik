package com.avloga.budgetik.ui.screens

import ExpensesViewModel
import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.avloga.budgetik.R
import com.avloga.budgetik.data.firebase.FirebaseFirestoreManager
import com.avloga.budgetik.ui.components.*
import com.avloga.budgetik.ui.theme.LightMintGreen
import kotlinx.coroutines.launch
import java.time.LocalDate
import java.time.LocalTime
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import androidx.compose.foundation.clickable
import com.avloga.budgetik.ui.theme.DarkGray
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp
import com.avloga.budgetik.ui.theme.BalanceGreen
import java.util.Locale
import com.avloga.budgetik.ui.components.CategoryPercentage

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MainScreen(
    navController: NavController,
    userId: String,
    viewModel: ExpensesViewModel = viewModel()
) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()
    val expenses by viewModel.expensesFlow.collectAsState()

    var showDialog by remember { mutableStateOf(false) }

    val name = when (userId.lowercase()) {
        "pasha" -> "–ü–∞—à–∞"
        "tanya" -> "–¢–∞–Ω—è"
        else -> "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    }

    val avatarRes = when (userId.lowercase()) {
        "pasha" -> R.drawable.pasha_avatar
        "tanya" -> R.drawable.tanya_avatar
        else -> R.drawable.default_avatar
    }

    val dateFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy")
    val timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss")

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É —á–∞—Å—É (–ø—ñ–¥—Ç—Ä–∏–º—É—î —è–∫ HH:mm, —Ç–∞–∫ —ñ HH:mm:ss)
    fun parseTimeSafely(timeStr: String): LocalTime {
        return try {
            // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –Ω–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç –∑ —Å–µ–∫—É–Ω–¥–∞–º–∏
            LocalTime.parse(timeStr, DateTimeFormatter.ofPattern("HH:mm:ss"))
        } catch (e: Exception) {
            try {
                // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è, –ø—Ä–æ–±—É—î–º–æ —Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —Å–µ–∫—É–Ω–¥
                LocalTime.parse(timeStr, DateTimeFormatter.ofPattern("HH:mm"))
            } catch (e: Exception) {
                // –Ø–∫—â–æ —ñ —Ü–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —á–∞—Å
                LocalTime.MIN
            }
        }
    }

    val allExpenses = expenses.sortedByDescending { expense ->
        try {
            val date = LocalDate.parse(expense.date, dateFormatter)
            val time = parseTimeSafely(expense.time)
            LocalDateTime.of(date, time)
        } catch (e: Exception) {
            LocalDateTime.MIN
        }
    }

    val totalBalance = allExpenses.sumOf { if (it.type == "income") it.amount else -it.amount }
    val balanceText = "${totalBalance.toInt()} ‚Ç¥"

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ—Ö–æ–¥—ñ–≤ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞
    val totalIncome = allExpenses.filter { it.type == "income" }.sumOf { it.amount }
    val totalExpense = allExpenses.filter { it.type == "outcome" }.sumOf { it.amount }
    val incomeText = "${totalIncome.toInt()} –≥—Ä–Ω"
    val expenseText = "${totalExpense.toInt()} –≥—Ä–Ω"

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É –≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫, 4 —Å–µ—Ä–ø–Ω—è")
    val currentDate = remember {
        val now = LocalDate.now()
        val locale = Locale("uk")
        val dayOfWeek = now.dayOfWeek.getDisplayName(java.time.format.TextStyle.FULL, locale)
            .replaceFirstChar { it.uppercase(locale) }
        val day = now.dayOfMonth.toString()
        val month = now.month.getDisplayName(java.time.format.TextStyle.FULL, locale)
            .lowercase(locale)
            .replaceFirstChar { it.uppercase(locale) }
        "$dayOfWeek, $day $month"
    }

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    val categoryPercentages = remember(allExpenses) {
        val totalExpenses = allExpenses.filter { it.type == "outcome" }.sumOf { it.amount }
        if (totalExpenses > 0) {
            val categoryTotals = mutableMapOf<String, Double>()
            
            // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—É–º—É –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            allExpenses.filter { it.type == "outcome" }.forEach { expense ->
                val category = expense.category ?: "–Ü–Ω—à–µ"
                categoryTotals[category] = categoryTotals.getOrDefault(category, 0.0) + expense.amount
            }
            
            // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥—Å–æ—Ç–∫–∏
            categoryTotals.mapValues { (_, amount) ->
                val percentage = (amount / totalExpenses * 100)
                when {
                    percentage >= 1 -> "${percentage.toInt()}%"
                    percentage > 0 -> "<1%"
                    else -> "0%"
                }
            }
        } else {
            emptyMap()
        }
    }

    // –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
    // –©–æ–± –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, –ø—Ä–æ—Å—Ç–æ –∑–º—ñ–Ω—ñ—Ç—å —ó—ó –ø–æ–∑–∏—Ü—ñ—é –≤ —Å–ø–∏—Å–∫—É
    // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —â–æ–± –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ "–ó–≤'—è–∑–æ–∫" –∑ –ø–µ—Ä—à–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –≤ –æ—Å—Ç–∞–Ω–Ω—é:
    // - –ü–µ—Ä–µ–º—ñ—Å—Ç—ñ—Ç—å CategoryItem("üìû", ...) –≤ –∫—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É
    val categories = remember {
        listOf(
            CategoryItem("üìû", com.avloga.budgetik.ui.theme.CategoryPink, "–ó–≤'—è–∑–æ–∫"),           // –ø–æ–∑–∏—Ü—ñ—è 0
            CategoryItem("üçΩÔ∏è", com.avloga.budgetik.ui.theme.CategoryGreen, "–á–∂–∞"),             // –ø–æ–∑–∏—Ü—ñ—è 1
            CategoryItem("‚òï", com.avloga.budgetik.ui.theme.CategoryOrange, "–ö–∞—Ñ–µ"),                // –ø–æ–∑–∏—Ü—ñ—è 2
            CategoryItem("üöå", com.avloga.budgetik.ui.theme.CategoryBlue, "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),        // –ø–æ–∑–∏—Ü—ñ—è 3
            CategoryItem("üöï", com.avloga.budgetik.ui.theme.CategoryYellow, "–¢–∞–∫—Å—ñ"),            // –ø–æ–∑–∏—Ü—ñ—è 4
            CategoryItem("üß¥", com.avloga.budgetik.ui.theme.CategoryCyan, "–ì—ñ–≥—ñ—î–Ω–∞"),          // –ø–æ–∑–∏—Ü—ñ—è 5
            CategoryItem("üê±", com.avloga.budgetik.ui.theme.CategoryTeal, "–£–ª—é–±–ª–µ–Ω—Ü—ñ"),        // –ø–æ–∑–∏—Ü—ñ—è 6
            CategoryItem("üëï", com.avloga.budgetik.ui.theme.CategoryPurple, "–û–¥—è–≥"),           // –ø–æ–∑–∏—Ü—ñ—è 7
            CategoryItem("üéÅ", com.avloga.budgetik.ui.theme.CategoryRed, "–ü–æ–¥–∞—Ä—É–Ω–∫–∏"),      // –ø–æ–∑–∏—Ü—ñ—è 8
            CategoryItem("‚öΩ", com.avloga.budgetik.ui.theme.CategoryLime, "–°–ø–æ—Ä—Ç"),            // –ø–æ–∑–∏—Ü—ñ—è 9
            CategoryItem("üè•", com.avloga.budgetik.ui.theme.CategoryDeepOrange, "–ó–¥–æ—Ä–æ–≤'—è"),          // –ø–æ–∑–∏—Ü—ñ—è 10
            CategoryItem("üéÆ", com.avloga.budgetik.ui.theme.CategoryIndigo, "–Ü–≥—Ä–∏"),           // –ø–æ–∑–∏—Ü—ñ—è 11
            CategoryItem("üç∫", com.avloga.budgetik.ui.theme.CategoryAmber, "–†–æ–∑–≤–∞–≥–∏"),        // –ø–æ–∑–∏—Ü—ñ—è 12
            CategoryItem("üè†", com.avloga.budgetik.ui.theme.CategoryBrown, "–ñ–∏—Ç–ª–æ")             // –ø–æ–∑–∏—Ü—ñ—è 13
        )
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ –≤—ñ–¥—Å–æ—Ç–∫–∞–º–∏ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏
    val categoryPercentagesForChart = remember(categoryPercentages, categories) {
        categories.map { category ->
            val percentageText = categoryPercentages[category.contentDescription] ?: "0%"
            val percentage = when {
                percentageText == "0%" -> 0f
                percentageText == "<1%" -> 0.5f // –ü–æ–∫–∞–∑—É—î–º–æ —è–∫ 0.5% –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
                else -> percentageText.removeSuffix("%").toFloatOrNull() ?: 0f
            }
            CategoryPercentage(
                name = category.contentDescription,
                percentage = percentage,
                color = category.color
            )
        }
    }

    Surface(
        modifier = Modifier.fillMaxSize(),
        color = LightMintGreen
    ) {
        Column(
            modifier = Modifier.fillMaxSize()
        ) {
            // –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å
            CustomTopBar(
                modifier = Modifier.fillMaxWidth(),
                onMenuClick = {
                    // TODO: –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é (–ø–æ–∫–∏ —â–æ –±–µ–∑ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É)
                }
            )

            // –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp)
                    .verticalScroll(rememberScrollState()),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {

                // –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞
                Text(
                    text = currentDate,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Normal,
                    color = BalanceGreen
                )

                Spacer(modifier = Modifier.height(16.dp))

                // –°—ñ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—é –¥—ñ–∞–≥—Ä–∞–º–æ—é
                CategoryGrid(
                    categories = categories,
                    incomeText = incomeText,
                    expenseText = expenseText,
                    categoryPercentages = categoryPercentagesForChart,
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(450.dp)
                )






                Spacer(modifier = Modifier.weight(1f))

                // –ü–∞–Ω–µ–ª—å –±–∞–ª–∞–Ω—Å—É
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // –õ—ñ–≤–∞ —ñ–∫–æ–Ω–∫–∞ (–∫–Ω–æ–ø–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó)
                    Icon(
                        imageVector = Icons.Default.Menu,
                        contentDescription = "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π",
                        tint = DarkGray,
                        modifier = Modifier
                            .size(24.dp)
                            .clickable {
                                navController.currentBackStackEntry?.savedStateHandle?.set(
                                    "expenses",
                                    allExpenses
                                )
                                navController.currentBackStackEntry?.savedStateHandle?.set(
                                    "userId",
                                    userId
                                )
                                navController.navigate("all_expenses")
                            }
                    )
                    
                    // –ü–∞–Ω–µ–ª—å –±–∞–ª–∞–Ω—Å—É (–∫–Ω–æ–ø–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó)
                    BalancePanel(
                        balance = balanceText,
                        onClick = {
                            navController.currentBackStackEntry?.savedStateHandle?.set(
                                "expenses",
                                allExpenses
                            )
                            navController.currentBackStackEntry?.savedStateHandle?.set(
                                "userId",
                                userId
                            )
                            navController.navigate("all_expenses")
                        },
                        modifier = Modifier.weight(1f)
                    )
                    
                    // –ü—Ä–∞–≤–∞ —ñ–∫–æ–Ω–∫–∞ (–∫–Ω–æ–ø–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó)
                    Icon(
                        imageVector = Icons.Default.Menu,
                        contentDescription = "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π",
                        tint = DarkGray,
                        modifier = Modifier
                            .size(24.dp)
                            .clickable {
                                navController.currentBackStackEntry?.savedStateHandle?.set(
                                    "expenses",
                                    allExpenses
                                )
                                navController.currentBackStackEntry?.savedStateHandle?.set(
                                    "userId",
                                    userId
                                )
                                navController.navigate("all_expenses")
                            }
                    )
                }

                Spacer(modifier = Modifier.height(32.dp))

                // –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
                ActionButtons(
                    onExpenseClick = { showDialog = true },
                    onIncomeClick = { showDialog = true },
                    modifier = Modifier.fillMaxWidth()
                )

                Spacer(modifier = Modifier.height(32.dp))
            }
        }

        // –î—ñ–∞–ª–æ–≥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç/–¥–æ—Ö–æ–¥—ñ–≤
        if (showDialog) {
            AddExpenseDialog(
                userId = name,
                onDismiss = { showDialog = false },
                onSubmit = { expense ->
                    scope.launch {
                        FirebaseFirestoreManager.addExpense(
                            expense,
                            onSuccess = {
                                Toast.makeText(context, "–û–ø–µ—Ä–∞—Ü—ñ—é –¥–æ–¥–∞–Ω–æ", Toast.LENGTH_SHORT).show()
                                showDialog = false
                            },
                            onFailure = {
                                Toast.makeText(context, "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è", Toast.LENGTH_SHORT).show()
                            }
                        )
                    }
                }
            )
        }
    }
}
