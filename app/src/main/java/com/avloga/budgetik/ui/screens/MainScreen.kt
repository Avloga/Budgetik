package com.avloga.budgetik.ui.screens

import ExpensesViewModel
import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.avloga.budgetik.R
import com.avloga.budgetik.data.firebase.FirebaseFirestoreManager
import com.avloga.budgetik.ui.components.*
import com.avloga.budgetik.ui.theme.LightMintGreen
import kotlinx.coroutines.launch
import java.time.LocalDate
import java.time.LocalTime
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import androidx.compose.foundation.clickable
import com.avloga.budgetik.ui.theme.DarkGray

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MainScreen(
    navController: NavController,
    userId: String,
    viewModel: ExpensesViewModel = viewModel()
) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()
    val expenses by viewModel.expensesFlow.collectAsState()

    var showDialog by remember { mutableStateOf(false) }

    val name = when (userId.lowercase()) {
        "pasha" -> "–ü–∞—à–∞"
        "tanya" -> "–¢–∞–Ω—è"
        else -> "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    }

    val avatarRes = when (userId.lowercase()) {
        "pasha" -> R.drawable.pasha_avatar
        "tanya" -> R.drawable.tanya_avatar
        else -> R.drawable.default_avatar
    }

    val dateFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy")
    val timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss")

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É —á–∞—Å—É (–ø—ñ–¥—Ç—Ä–∏–º—É—î —è–∫ HH:mm, —Ç–∞–∫ —ñ HH:mm:ss)
    fun parseTimeSafely(timeStr: String): LocalTime {
        return try {
            // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –Ω–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç –∑ —Å–µ–∫—É–Ω–¥–∞–º–∏
            LocalTime.parse(timeStr, DateTimeFormatter.ofPattern("HH:mm:ss"))
        } catch (e: Exception) {
            try {
                // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è, –ø—Ä–æ–±—É—î–º–æ —Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —Å–µ–∫—É–Ω–¥
                LocalTime.parse(timeStr, DateTimeFormatter.ofPattern("HH:mm"))
            } catch (e: Exception) {
                // –Ø–∫—â–æ —ñ —Ü–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —á–∞—Å
                LocalTime.MIN
            }
        }
    }

    val allExpenses = expenses.sortedByDescending { expense ->
        try {
            val date = LocalDate.parse(expense.date, dateFormatter)
            val time = parseTimeSafely(expense.time)
            LocalDateTime.of(date, time)
        } catch (e: Exception) {
            LocalDateTime.MIN
        }
    }

    val totalBalance = allExpenses.sumOf { if (it.type == "income") it.amount else -it.amount }
    val balanceText = "${totalBalance.toInt()} ‚Ç¥"

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ—Ö–æ–¥—ñ–≤ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞
    val totalIncome = allExpenses.filter { it.type == "income" }.sumOf { it.amount }
    val totalExpense = allExpenses.filter { it.type == "outcome" }.sumOf { it.amount }
    val incomeText = "${totalIncome.toInt()} –≥—Ä–Ω"
    val expenseText = "${totalExpense.toInt()} –≥—Ä–Ω"

    Surface(
        modifier = Modifier.fillMaxSize(),
        color = LightMintGreen
    ) {
        Column(
            modifier = Modifier.fillMaxSize()
        ) {
            // –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å
            CustomTopBar(
                modifier = Modifier.fillMaxWidth(),
                onMenuClick = {
                    // TODO: –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é (–ø–æ–∫–∏ —â–æ –±–µ–∑ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É)
                }
            )

            // –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp)
                    .verticalScroll(rememberScrollState()),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Spacer(modifier = Modifier.height(24.dp))

                // –°—ñ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ –∫—Ä—É–≥–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // –õ—ñ–≤–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
                    Column(
                        horizontalAlignment = Alignment.CenterHorizontally,
                        verticalArrangement = Arrangement.spacedBy(16.dp)
                    ) {
                        CategoryText(
                            text = "üõí",
                            color = com.avloga.budgetik.ui.theme.CategoryPink,
                            contentDescription = "–ü–æ–∫—É–ø–∫–∏"
                        )
                        CategoryText(
                            text = "üè†",
                            color = com.avloga.budgetik.ui.theme.CategoryBlue,
                            contentDescription = "–ë—É–¥–∏–Ω–æ–∫"
                        )
                        CategoryText(
                            text = "üçΩÔ∏è",
                            color = com.avloga.budgetik.ui.theme.LightGray,
                            contentDescription = "–á–∂–∞"
                        )
                        CategoryText(
                            text = "üß¥",
                            color = com.avloga.budgetik.ui.theme.CategoryBlue,
                            contentDescription = "–û—Å–æ–±–∏—Å—Ç–∞ –≥—ñ–≥—ñ—î–Ω–∞"
                        )
                        CategoryText(
                            text = "‚öΩ",
                            color = com.avloga.budgetik.ui.theme.CategoryTeal,
                            contentDescription = "–°–ø–æ—Ä—Ç"
                        )
                        CategoryText(
                            text = "üöó",
                            color = com.avloga.budgetik.ui.theme.CategoryBlue,
                            contentDescription = "–ú–∞—à–∏–Ω–∞"
                        )
                    }

                    // –ö—Ä—É–≥–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                    CircularChart(
                        income = incomeText,
                        expense = expenseText
                    )

                    // –ü—Ä–∞–≤–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
                    Column(
                        horizontalAlignment = Alignment.CenterHorizontally,
                        verticalArrangement = Arrangement.spacedBy(16.dp)
                    ) {
                        CategoryText(
                            text = "üè•",
                            color = com.avloga.budgetik.ui.theme.CategoryRed,
                            contentDescription = "–ó–¥–æ—Ä–æ–≤'—è"
                        )
                        CategoryText(
                            text = "üìû",
                            color = com.avloga.budgetik.ui.theme.LightGray,
                            contentDescription = "–¢–µ–ª–µ—Ñ–æ–Ω"
                        )
                        CategoryText(
                            text = "üê±",
                            color = com.avloga.budgetik.ui.theme.CategoryTeal,
                            contentDescription = "–¢–≤–∞—Ä–∏–Ω–∏"
                        )
                        CategoryText(
                            text = "üéÅ",
                            color = com.avloga.budgetik.ui.theme.CategoryPurple,
                            contentDescription = "–ü–æ–¥–∞—Ä—É–Ω–∫–∏"
                        )
                        CategoryText(
                            text = "üëï",
                            color = com.avloga.budgetik.ui.theme.CategoryPurple,
                            contentDescription = "–û–¥—è–≥"
                        )
                        CategoryText(
                            text = "üç∫",
                            color = com.avloga.budgetik.ui.theme.CategoryOrange,
                            contentDescription = "–†–æ–∑–≤–∞–≥–∏"
                        )
                    }
                }

                Spacer(modifier = Modifier.weight(1f))

                // –ü–∞–Ω–µ–ª—å –±–∞–ª–∞–Ω—Å—É
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // –õ—ñ–≤–∞ —ñ–∫–æ–Ω–∫–∞ (–∫–Ω–æ–ø–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó)
                    Icon(
                        imageVector = Icons.Default.Menu,
                        contentDescription = "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π",
                        tint = DarkGray,
                        modifier = Modifier
                            .size(24.dp)
                            .clickable {
                                navController.currentBackStackEntry?.savedStateHandle?.set(
                                    "expenses",
                                    allExpenses
                                )
                                navController.currentBackStackEntry?.savedStateHandle?.set(
                                    "userId",
                                    userId
                                )
                                navController.navigate("all_expenses")
                            }
                    )
                    
                    // –ü–∞–Ω–µ–ª—å –±–∞–ª–∞–Ω—Å—É (–∫–Ω–æ–ø–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó)
                    BalancePanel(
                        balance = balanceText,
                        onClick = {
                            navController.currentBackStackEntry?.savedStateHandle?.set(
                                "expenses",
                                allExpenses
                            )
                            navController.currentBackStackEntry?.savedStateHandle?.set(
                                "userId",
                                userId
                            )
                            navController.navigate("all_expenses")
                        },
                        modifier = Modifier.weight(1f)
                    )
                    
                    // –ü—Ä–∞–≤–∞ —ñ–∫–æ–Ω–∫–∞ (–∫–Ω–æ–ø–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó)
                    Icon(
                        imageVector = Icons.Default.Menu,
                        contentDescription = "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π",
                        tint = DarkGray,
                        modifier = Modifier
                            .size(24.dp)
                            .clickable {
                                navController.currentBackStackEntry?.savedStateHandle?.set(
                                    "expenses",
                                    allExpenses
                                )
                                navController.currentBackStackEntry?.savedStateHandle?.set(
                                    "userId",
                                    userId
                                )
                                navController.navigate("all_expenses")
                            }
                    )
                }

                Spacer(modifier = Modifier.height(32.dp))

                // –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
                ActionButtons(
                    onExpenseClick = { showDialog = true },
                    onIncomeClick = { showDialog = true },
                    modifier = Modifier.fillMaxWidth()
                )

                Spacer(modifier = Modifier.height(32.dp))
            }
        }

        // –î—ñ–∞–ª–æ–≥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç/–¥–æ—Ö–æ–¥—ñ–≤
        if (showDialog) {
            AddExpenseDialog(
                userId = name,
                onDismiss = { showDialog = false },
                onSubmit = { expense ->
                    scope.launch {
                        FirebaseFirestoreManager.addExpense(
                            expense,
                            onSuccess = {
                                Toast.makeText(context, "–û–ø–µ—Ä–∞—Ü—ñ—é –¥–æ–¥–∞–Ω–æ", Toast.LENGTH_SHORT).show()
                                showDialog = false
                            },
                            onFailure = {
                                Toast.makeText(context, "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è", Toast.LENGTH_SHORT).show()
                            }
                        )
                    }
                }
            )
        }
    }
}
