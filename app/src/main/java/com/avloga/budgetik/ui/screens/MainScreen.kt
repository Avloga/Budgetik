package com.avloga.budgetik.ui.screens

import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.avloga.budgetik.R
import com.avloga.budgetik.data.firebase.FirebaseFirestoreManager
import com.avloga.budgetik.ui.components.*
import com.avloga.budgetik.ui.theme.LightMintGreen
import kotlinx.coroutines.launch
import java.time.LocalDate
import java.time.LocalTime
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import androidx.compose.foundation.clickable
import com.avloga.budgetik.ui.theme.DarkGray
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp
import com.avloga.budgetik.ui.theme.BalanceGreen
import java.util.Locale
import com.avloga.budgetik.util.MoneyUtils.formatMoneyTruncated
import com.avloga.budgetik.util.MoneyUtils.formatMoneyTruncatedWithSign
import com.avloga.budgetik.ui.components.CategoryPercentage
import com.avloga.budgetik.ui.components.SideMenu
import com.avloga.budgetik.util.AccountType

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MainScreen(
    navController: NavController,
    userId: String,
    viewModel: ExpensesViewModel
) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()
    val expenses by viewModel.expensesFlow.collectAsState()

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π selectedAccount –≤ ViewModel –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –Ω–∞ –µ–∫—Ä–∞–Ω
    LaunchedEffect(Unit) {
        // –¶–µ –∑–∞–±–µ–∑–ø–µ—á–∏—Ç—å, —â–æ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –Ω–∞ –µ–∫—Ä–∞–Ω –º–∏ –º–∞—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
        viewModel.refreshBalances()
    }

    val filteredExpenses by viewModel.filteredExpensesFlow.collectAsState()
    val formattedDate by viewModel.formattedDateFlow.collectAsState()
    val selectedPeriod by viewModel.selectedPeriod.collectAsState()
    val selectedAccount by viewModel.selectedAccount.collectAsState()
    val allExpenses by viewModel.allExpensesFlow.collectAsState()
    val cashBalance by viewModel.cashBalance.collectAsState()
    val cardBalance by viewModel.cardBalance.collectAsState()

    var showDialog by remember { mutableStateOf(false) }
    var lastPressedType by remember { mutableStateOf<String?>(null) } // "outcome" –∞–±–æ "income"
    var showSideMenu by remember { mutableStateOf(false) }

    // –û–ø—Ç–∏–º—ñ–∑—É—î–º–æ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ remember
    val name = remember(userId) {
        when (userId.lowercase()) {
            "pasha" -> "–ü–∞—à–∞"
            "tanya" -> "–¢–∞–Ω—è"
            else -> "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        }
    }

    val avatarRes = remember(userId) {
        when (userId.lowercase()) {
            "pasha" -> R.drawable.pasha_avatar
            "tanya" -> R.drawable.tanya_avatar
            else -> R.drawable.default_avatar
        }
    }

    val dateFormatter = remember { DateTimeFormatter.ofPattern("dd.MM.yyyy") }
    val timeFormatter = remember { DateTimeFormatter.ofPattern("HH:mm:ss") }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É —á–∞—Å—É (–ø—ñ–¥—Ç—Ä–∏–º—É—î —è–∫ HH:mm, —Ç–∞–∫ —ñ HH:mm:ss)
    val parseTimeSafely = remember {
        { timeStr: String ->
            try {
                // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –Ω–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç –∑ —Å–µ–∫—É–Ω–¥–∞–º–∏
                LocalTime.parse(timeStr, DateTimeFormatter.ofPattern("HH:mm:ss"))
            } catch (e: Exception) {
                try {
                    // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è, –ø—Ä–æ–±—É—î–º–æ —Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —Å–µ–∫—É–Ω–¥
                    LocalTime.parse(timeStr, DateTimeFormatter.ofPattern("HH:mm"))
                } catch (e: Exception) {
                    // –Ø–∫—â–æ —ñ —Ü–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —á–∞—Å
                    LocalTime.MIN
                }
            }
        }
    }

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞–º—ñ—Å—Ç—å –≤—Å—ñ—Ö
    val allExpensesForDisplay = remember(filteredExpenses) {
        filteredExpenses.sortedByDescending { expense ->
            try {
                val date = LocalDate.parse(expense.date, dateFormatter)
                val time = parseTimeSafely(expense.time)
                LocalDateTime.of(date, time)
            } catch (e: Exception) {
                LocalDateTime.MIN
            }
        }
    }

    val totalBalance = remember(allExpensesForDisplay) {
        allExpensesForDisplay.sumOf { if (it.type == "income") it.amount else -it.amount }
    }
    val balanceText = remember(totalBalance) { "${formatMoneyTruncatedWithSign(totalBalance)} ‚Ç¥" }

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ—Ö–æ–¥—ñ–≤ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞
    val totalIncome = remember(allExpensesForDisplay) {
        allExpensesForDisplay.filter { it.type == "income" }.sumOf { it.amount }
    }
    val totalExpense = remember(allExpensesForDisplay) {
        allExpensesForDisplay.filter { it.type == "outcome" }.sumOf { it.amount }
    }
    val incomeText = remember(totalIncome) { "${formatMoneyTruncated(totalIncome)} –≥—Ä–Ω" }
    val expenseText = remember(totalExpense) { "${formatMoneyTruncated(totalExpense)} –≥—Ä–Ω" }

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    val categoryPercentages = remember(allExpensesForDisplay) {
        val totalExpenses = allExpensesForDisplay.filter { it.type == "outcome" }.sumOf { it.amount }
        if (totalExpenses > 0) {
            val categoryTotals = mutableMapOf<String, Double>()
            
            // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—É–º—É –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            allExpensesForDisplay.filter { it.type == "outcome" }.forEach { expense ->
                val category = expense.category ?: "–Ü–Ω—à–µ"
                categoryTotals[category] = categoryTotals.getOrDefault(category, 0.0) + expense.amount
            }
            
            // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥—Å–æ—Ç–∫–∏
            categoryTotals.mapValues { (_, amount) ->
                val percentage = (amount / totalExpenses * 100)
                when {
                    percentage >= 1 -> "${percentage.toInt()}%"
                    percentage > 0 -> "<1%"
                    else -> "0%"
                }
            }
        } else {
            emptyMap()
        }
    }

    // –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
    // –©–æ–± –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, –ø—Ä–æ—Å—Ç–æ –∑–º—ñ–Ω—ñ—Ç—å —ó—ó –ø–æ–∑–∏—Ü—ñ—é –≤ —Å–ø–∏—Å–∫—É
    // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —â–æ–± –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ "–ó–≤'—è–∑–æ–∫" –∑ –ø–µ—Ä—à–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –≤ –æ—Å—Ç–∞–Ω–Ω—é:
    // - –ü–µ—Ä–µ–º—ñ—Å—Ç—ñ—Ç—å CategoryItem("üìû", ...) –≤ –∫—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É
    val categories = remember { Categories.toCategoryItems() }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ –≤—ñ–¥—Å–æ—Ç–∫–∞–º–∏ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏
    val categoryPercentagesForChart = remember(categoryPercentages, categories) {
        categories.map { category ->
            val percentageText = categoryPercentages[category.contentDescription] ?: "0%"
            val percentage = when {
                percentageText == "0%" -> 0f
                percentageText == "<1%" -> 0.5f // –ü–æ–∫–∞–∑—É—î–º–æ —è–∫ 0.5% –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
                else -> percentageText.removeSuffix("%").toFloatOrNull() ?: 0f
            }
            CategoryPercentage(
                name = category.contentDescription,
                percentage = percentage,
                color = category.color
            )
        }
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–∞—Ö—É–Ω–∫—É
    LaunchedEffect(selectedAccount) {
        viewModel.refreshBalances()
    }

    Surface(
        modifier = Modifier.fillMaxSize(),
        color = LightMintGreen
    ) {
        Column(
            modifier = Modifier.fillMaxSize()
        ) {
            // –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å
            CustomTopBar(
                modifier = Modifier.fillMaxWidth(),
                onMenuClick = {
                    showSideMenu = !showSideMenu
                },
                selectedAccount = selectedAccount,
                userId = userId
            )

            // –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp)
                    .verticalScroll(rememberScrollState()),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {

                // –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –¥–∞—Ç–∞ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–µ—Ä—ñ–æ–¥—É
                Text(
                    text = formattedDate,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Normal,
                    color = BalanceGreen
                )

                Spacer(modifier = Modifier.height(16.dp))

                // –°—ñ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—é –¥—ñ–∞–≥—Ä–∞–º–æ—é
                CategoryGrid(
                    categories = categories,
                    incomeText = incomeText,
                    expenseText = expenseText,
                    categoryPercentages = categoryPercentagesForChart,
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(450.dp)
                )

                Spacer(modifier = Modifier.weight(1f))

                // –ü–∞–Ω–µ–ª—å –±–∞–ª–∞–Ω—Å—É
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // –õ—ñ–≤–∞ —ñ–∫–æ–Ω–∫–∞ (–∫–Ω–æ–ø–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó)
                    Icon(
                        imageVector = Icons.Default.Menu,
                        contentDescription = "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π",
                        tint = DarkGray,
                        modifier = Modifier
                            .size(24.dp)
                            .clickable {
                                navController.navigate("all_expenses/$userId/${selectedAccount.name}") {
                                    popUpTo("MainScreen/$userId") { saveState = true }
                                    launchSingleTop = true
                                    restoreState = false
                                }
                            }
                    )
                    
                    // –ü–∞–Ω–µ–ª—å –±–∞–ª–∞–Ω—Å—É (–∫–Ω–æ–ø–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó)
                    BalancePanel(
                        balance = balanceText,
                        onClick = {
                            navController.navigate("all_expenses/$userId/${selectedAccount.name}") {
                                popUpTo("MainScreen/$userId") { saveState = true }
                                launchSingleTop = true
                                restoreState = false
                            }
                        },
                        modifier = Modifier.weight(1f)
                    )
                    
                    // –ü—Ä–∞–≤–∞ —ñ–∫–æ–Ω–∫–∞ (–∫–Ω–æ–ø–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó)
                    Icon(
                        imageVector = Icons.Default.Menu,
                        contentDescription = "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π",
                        tint = DarkGray,
                        modifier = Modifier
                            .size(24.dp)
                            .clickable {
                                navController.navigate("all_expenses/$userId/${selectedAccount.name}") {
                                    popUpTo("MainScreen/$userId") { saveState = true }
                                    launchSingleTop = true
                                    restoreState = false
                                }
                            }
                    )
                }

                Spacer(modifier = Modifier.height(32.dp))

                // –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
                ActionButtons(
                    onExpenseClick = {
                        lastPressedType = "outcome"
                        showDialog = true
                    },
                    onIncomeClick = {
                        lastPressedType = "income"
                        showDialog = true
                    },
                    modifier = Modifier.fillMaxWidth()
                )

                Spacer(modifier = Modifier.height(32.dp))
            }
        }

        // –î—ñ–∞–ª–æ–≥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç/–¥–æ—Ö–æ–¥—ñ–≤
        if (showDialog) {
            AddExpenseDialog(
                userId = name,
                onDismiss = { showDialog = false },
                onSubmit = { expense ->
                    scope.launch {
                        if (selectedAccount == AccountType.ALL) {
                            Toast.makeText(context, "–û–±–µ—Ä—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó", Toast.LENGTH_LONG).show()
                            return@launch
                        }
                        
                        FirebaseFirestoreManager.addExpense(
                            expense,
                            selectedAccount, // –ü–µ—Ä–µ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫
                            onSuccess = {
                                Toast.makeText(context, "–û–ø–µ—Ä–∞—Ü—ñ—é –¥–æ–¥–∞–Ω–æ", Toast.LENGTH_SHORT).show()
                                showDialog = false
                            },
                            onFailure = {
                                Toast.makeText(context, "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è", Toast.LENGTH_SHORT).show()
                            }
                        )
                    }
                },
                // –ü–µ—Ä–µ–¥–∞—î–º–æ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Ç–∏–ø —É –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—ó –∫–Ω–æ–ø–∫–∏
                presetType = lastPressedType
            )
        }

        // –ë–æ–∫–æ–≤–µ –º–µ–Ω—é
        SideMenu(
            isVisible = showSideMenu,
            onDismiss = { showSideMenu = false },
            selectedPeriod = selectedPeriod,
            selectedAccount = selectedAccount,
            cashBalance = cashBalance,
            cardBalance = cardBalance,
            onPeriodSelected = { periodName ->
                viewModel.setSelectedPeriodFromString(periodName)
            },
            onAccountSelected = { accountType ->
                // –ë–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫
                viewModel.setSelectedAccount(accountType)
                showSideMenu = false
            }
        )


    }
}
