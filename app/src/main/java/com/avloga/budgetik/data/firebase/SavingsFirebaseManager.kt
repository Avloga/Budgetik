package com.avloga.budgetik.data.firebase

import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.Query
import com.avloga.budgetik.data.model.*
import kotlinx.coroutines.tasks.await
import com.google.firebase.Timestamp

class SavingsFirebaseManager {
    private val db = FirebaseFirestore.getInstance()
    private val collectionName = "bank_savings"

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    suspend fun getUserSavings(userId: String): List<SavingsBank> {
        return try {
            println("üîç –ó–∞–ø–∏—Ç—É—é –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: $userId")
            println("üìç –ö–æ–ª–µ–∫—Ü—ñ—è: $collectionName")
            
            // –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º–∞—î–º–æ –≤—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            val allDocs = db.collection(collectionName).get().await()
            println("üìã –í—Å—å–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –≤ –∫–æ–ª–µ–∫—Ü—ñ—ó: ${allDocs.documents.size}")
            
            allDocs.documents.forEach { doc ->
                val bank = doc.toObject(SavingsBank::class.java)
                println("üìÑ –î–æ–∫—É–º–µ–Ω—Ç ${doc.id}: userId='${bank?.userId}', isActive=${bank?.isActive}, name='${bank?.name}'")
            }
            
            // –¢–µ–ø–µ—Ä —Ä–æ–±–∏–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –∑–∞–ø–∏—Ç
            println("üîç –í–∏–∫–æ–Ω—É—é –æ—Å–Ω–æ–≤–Ω–∏–π –∑–∞–ø–∏—Ç –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏...")
            println("üîç –®—É–∫–∞—é –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∑ userId='$userId' —Ç–∞ active=true")
            
            // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –±–µ–∑ orderBy
            println("üîç –¢–µ—Å—Ç—É—é –∑–∞–ø–∏—Ç –±–µ–∑ orderBy...")
            val testSnapshot = db.collection(collectionName)
                .whereEqualTo("userId", userId)
                .whereEqualTo("active", true)
                .get()
                .await()
            println("üìä –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –±–µ–∑ orderBy: ${testSnapshot.documents.size} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤")
            
            // –¢–∏–º—á–∞—Å–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –±–µ–∑ orderBy
            // –û—Å–Ω–æ–≤–Ω–∏–π –∑–∞–ø–∏—Ç –∑ orderBy (–∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ –ø–æ–∫–∏ –Ω–µ —Å—Ç–≤–æ—Ä–∏—Ç—å—Å—è —ñ–Ω–¥–µ–∫—Å)
            /*
            val snapshot = db.collection(collectionName)
                .whereEqualTo("userId", userId)
                .whereEqualTo("active", true)
                .orderBy("createdAt", Query.Direction.DESCENDING)
                .get()
                .await()
            */
            
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç
            val snapshot = testSnapshot
            
            println("üìä –û—Ç—Ä–∏–º–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏: ${snapshot.documents.size}")
            
            val banks = snapshot.documents.mapNotNull { doc ->
                val bank = doc.toObject(SavingsBank::class.java)
                println("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –±–∞–Ω–∫—É: ${bank?.name}")
                bank?.copy(id = doc.id)
            }
            
            // –°–æ—Ä—Ç—É—î–º–æ –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ –∑–∞–º—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
            val sortedBanks = banks.sortedByDescending { it.createdAt }
            
            println("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –±–∞–Ω–æ–∫: ${sortedBanks.size}")
            sortedBanks.forEach { bank ->
                println("üè¶ ${bank.name}: ${bank.currentAmount}/${bank.targetAmount} ‚Ç¥ (isActive: ${bank.isActive})")
            }
            
            sortedBanks
        } catch (e: Exception) {
            println("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∫–æ–ø–∏—á–µ–Ω—å: ${e.message}")
            e.printStackTrace()
            emptyList()
        }
    }

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –±–∞–Ω–∫—É –Ω–∞–∫–æ–ø–∏—á–µ–Ω—å
    suspend fun createSavingsBank(
        userId: String,
        request: CreateSavingsBankRequest,
        onSuccess: () -> Unit,
        onFailure: (String) -> Unit
    ) {
        try {
            println("üî® SavingsFirebaseManager: –°—Ç–≤–æ—Ä—é—é –±–∞–Ω–∫—É '${request.name}' –¥–ª—è userId: $userId")
            
            val savingsBank = SavingsBank(
                name = request.name,
                targetAmount = request.targetAmount,
                currentAmount = 0.0,
                description = request.description,
                category = request.category,
                color = request.color,
                userId = userId,
                createdAt = Timestamp.now(),
                updatedAt = Timestamp.now(),
                isActive = true
            )
            
            println("üìù SavingsFirebaseManager: –°—Ç–≤–æ—Ä—é—é –æ–±'—î–∫—Ç –±–∞–Ω–∫–∏:")
            println("   - name: ${savingsBank.name}")
            println("   - userId: '${savingsBank.userId}'")
            println("   - isActive: ${savingsBank.isActive}")
            println("   - createdAt: ${savingsBank.createdAt}")

            println("üìù SavingsFirebaseManager: –ó–±–µ—Ä—ñ–≥–∞—é –±–∞–Ω–∫—É –≤ Firestore...")
            val docRef = db.collection(collectionName)
                .add(savingsBank)
                .await()

            println("‚úÖ SavingsFirebaseManager: –ë–∞–Ω–∫–∞ '${request.name}' —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∑ ID: ${docRef.id}")
            onSuccess()
        } catch (e: Exception) {
            println("‚ùå SavingsFirebaseManager: –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–Ω–∫–∏ '${request.name}': ${e.message}")
            e.printStackTrace()
            onFailure("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–Ω–∫–∏: ${e.message}")
        }
    }

    // –û–Ω–æ–≤–∏—Ç–∏ –±–∞–Ω–∫—É –Ω–∞–∫–æ–ø–∏—á–µ–Ω—å
    suspend fun updateSavingsBank(
        bankId: String,
        request: UpdateSavingsBankRequest,
        onSuccess: () -> Unit,
        onFailure: (String) -> Unit
    ) {
        try {
            val updates = mutableMapOf<String, Any>()
            
            request.name?.let { updates["name"] = it }
            request.targetAmount?.let { updates["targetAmount"] = it }
            request.currentAmount?.let { updates["currentAmount"] = it }
            request.description?.let { updates["description"] = it }
            request.category?.let { updates["category"] = it }
            request.color?.let { updates["color"] = it }
            request.isActive?.let { updates["active"] = it } // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ "active" –¥–ª—è Firestore
            
            updates["updatedAt"] = Timestamp.now()

            db.collection(collectionName)
                .document(bankId)
                .update(updates)
                .await()

            onSuccess()
        } catch (e: Exception) {
            onFailure("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–Ω–∫–∏: ${e.message}")
        }
    }

    // –î–æ–¥–∞—Ç–∏ —Å—É–º—É –¥–æ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è
    suspend fun addToSavings(
        bankId: String,
        amount: Double,
        onSuccess: () -> Unit,
        onFailure: (String) -> Unit
    ) {
        try {
            val bankRef = db.collection(collectionName).document(bankId)
            
            db.runTransaction { transaction ->
                val bankDoc = transaction.get(bankRef)
                val currentAmount = bankDoc.getDouble("currentAmount") ?: 0.0
                val newAmount = currentAmount + amount
                
                transaction.update(bankRef, mapOf(
                    "currentAmount" to newAmount,
                    "updatedAt" to Timestamp.now()
                ))
            }.await()

            onSuccess()
        } catch (e: Exception) {
            onFailure("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—É–º–∏: ${e.message}")
        }
    }

    // –í–∏–¥–∞–ª–∏—Ç–∏ –±–∞–Ω–∫—É –Ω–∞–∫–æ–ø–∏—á–µ–Ω—å (–¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏)
    suspend fun deleteSavingsBank(
        bankId: String,
        onSuccess: () -> Unit,
        onFailure: (String) -> Unit
    ) {
        try {
            db.collection(collectionName)
                .document(bankId)
                .update(mapOf(
                    "active" to false, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ "active" –¥–ª—è Firestore
                    "updatedAt" to Timestamp.now()
                ))
                .await()

            onSuccess()
        } catch (e: Exception) {
            onFailure("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±–∞–Ω–∫–∏: ${e.message}")
        }
    }

    // –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–∫–æ–ø–∏—á–µ–Ω—å
    suspend fun getSavingsStats(userId: String): SavingsData? {
        return try {
            val banks = getUserSavings(userId)
            val totalSavings = banks.sumOf { it.currentAmount }
            
            SavingsData(
                totalSavings = totalSavings,
                banks = banks
            )
        } catch (e: Exception) {
            println("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.message}")
            null
        }
    }

    // –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–∑—É —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
    suspend fun populateWithTestData(userId: String) {
        println("üèóÔ∏è SavingsFirebaseManager: –ü–æ—á–∏–Ω–∞—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –±–∞–Ω–æ–∫ –¥–ª—è userId: $userId")
        
        val testBanks = listOf(
            CreateSavingsBankRequest("–ù–∞ –ø–æ–¥–æ—Ä–æ–∂", 50000.0, "–ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –Ω–∞ –ø–æ–¥–æ—Ä–æ–∂ –∑–∞ –∫–æ—Ä–¥–æ–Ω", "–ü–æ–¥–æ—Ä–æ–∂—ñ"),
            CreateSavingsBankRequest("–ù–∞ –º–∞—à–∏–Ω—É", 200000.0, "–ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –Ω–∞ –Ω–æ–≤—É –º–∞—à–∏–Ω—É", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
            CreateSavingsBankRequest("–ù–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É", 1000000.0, "–ü–µ—Ä—à–∏–π –≤–Ω–µ—Å–æ–∫ –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É", "–ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å"),
            CreateSavingsBankRequest("–ù–∞ –æ—Å–≤—ñ—Ç—É", 100000.0, "–ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—è", "–û—Å–≤—ñ—Ç–∞"),
            CreateSavingsBankRequest("–ù–∞ —Ä–µ–º–æ–Ω—Ç", 75000.0, "–†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä–∏", "–ë—É–¥–∏–Ω–æ–∫"),
            CreateSavingsBankRequest("–ù–∞ —Å–≤—è—Ç–æ", 25000.0, "–ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –Ω–∞ —Å–≤—è—Ç–∫—É–≤–∞–Ω–Ω—è", "–†–æ–∑–≤–∞–≥–∏"),
            CreateSavingsBankRequest("–ù–∞ —Ö–æ–±—ñ", 15000.0, "–ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –Ω–∞ —Ö–æ–±—ñ", "–•–æ–±—ñ"),
            CreateSavingsBankRequest("–ù–∞ –ø–æ–¥–∞—Ä—É–Ω–∫–∏", 10000.0, "–ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –Ω–∞ –ø–æ–¥–∞—Ä—É–Ω–∫–∏", "–ü–æ–¥–∞—Ä—É–Ω–∫–∏"),
            CreateSavingsBankRequest("–ù–∞ –∑–∞–ø–∞—Å", 50000.0, "–ü–æ–¥—É—à–∫–∞ –±–µ–∑–ø–µ–∫–∏", "–ó–∞–ø–∞—Å"),
            CreateSavingsBankRequest("–ù–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", 100000.0, "–ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –¥–ª—è —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è", "–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó")
        )

        println("üìã SavingsFirebaseManager: –°—Ç–≤–æ—Ä—é—é ${testBanks.size} —Ç–µ—Å—Ç–æ–≤–∏—Ö –±–∞–Ω–æ–∫...")
        
        testBanks.forEach { bank ->
            println("üè¶ SavingsFirebaseManager: –°—Ç–≤–æ—Ä—é—é –±–∞–Ω–∫—É: ${bank.name}")
            createSavingsBank(
                userId = userId,
                request = bank,
                onSuccess = { println("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –±–∞–Ω–∫—É: ${bank.name}") },
                onFailure = { error -> println("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–Ω–∫–∏ ${bank.name}: $error") }
            )
        }

        println("üí∞ SavingsFirebaseManager: –î–æ–¥–∞—é –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Å—É–º–∏ –¥–æ –Ω–∞–∫–æ–ø–∏—á–µ–Ω—å...")
        
        // –î–æ–¥–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Å—É–º–∏ –¥–æ –Ω–∞–∫–æ–ø–∏—á–µ–Ω—å
        val existingBanks = getUserSavings(userId)
        println("üìä SavingsFirebaseManager: –ó–Ω–∞–π–¥–µ–Ω–æ ${existingBanks.size} –±–∞–Ω–æ–∫ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—É–º")
        
        existingBanks.forEach { bank ->
            val randomAmount = (1000..50000).random().toDouble()
            println("üí∏ SavingsFirebaseManager: –î–æ–¥–∞—é ${randomAmount} –¥–æ –±–∞–Ω–∫–∏ ${bank.name}")
            addToSavings(
                bankId = bank.id,
                amount = randomAmount,
                onSuccess = { println("‚úÖ –î–æ–¥–∞–Ω–æ ${randomAmount} –¥–æ ${bank.name}") },
                onFailure = { error -> println("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—É–º–∏ –¥–æ ${bank.name}: $error") }
            )
        }
        
        println("üéâ SavingsFirebaseManager: –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    }
}
